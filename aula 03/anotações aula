/**
 * Esse código em Kotlin é um esboço para um programa que interpreta cores de resistores elétricos.
 */

// Exibe as instruções para o usuário
fun showInstructions(){
    println("Calculadora de Resistores")
    println("Digite as cores do resistor separadas por vírgulas:")
}

// Exibe uma mensagem pedindo que o usuário digite as cores novamente caso a entrada seja inválida
fun showErrorReadInput(){
    println("Por favor, informe novamente as cores: ")
}

/**
 * String significa um tipo que não aceita null
 * Exemplo: var nome: String = null (não funciona - Kotlin não permite que uma variável do tipo String receba null)

 * No tipo estrito o nulo não é entendido como algo que possa ser atribuído
 * String? (o caractere interrogação) informa na frente do tipo que ele pode aceitar nulo (null)
 * Exemplo 01: var nome: String? = null (agora funciona)
 * Exemplo 02:
 * var nome: String? = "Carlos"
 * nome = null (permitido, pois 'nome' aceita valores nulos)
 */

// Lê a entrada do usuário através da função readln()
fun readColorsByUser(): String? { // retorna uma string do tipo null
    return readln()  // Lê a entrada do usuário no terminal
}

// Divide a string contendo as cores em uma lista (List<String>), usando a vírgula como separador
fun splitColors(colors: String): List<String> {
    return colors.split(",")
}
/**
 * Exemplo de entrada e saída
 * val resultado = splitColors("vermelho,azul,verde")
 * resultado será: ["vermelho", "azul", "verde"]
 */

// Remove espaços e converte a string para maiúsculas
fun cleanString(colors: String?): String? {
    // (colors: String?) → O parâmetro colors pode ser:
    // 1) Uma string normal, como "vermelho, azul, verde", ou null, porque tem um ? no tipo (String?).
    // 2) : String? → A função retorna uma String?, ou seja, o resultado pode ser nulo, ou uma string normal

    return colors?.replace(" ","")?.uppercase()
    // Essa linha usa Safe Calls (?.) para evitar erros caso colors seja null.
    // 1) colors?.replace(" ","")
    // - Se colors não for null, ele remove todos os espaços em branco (" ") da string.
    // - Se colors for null, a operação não é executada e null é retornado.
    // 2) .uppercase()
    // - Se replace(" ","") resultou em uma string válida, ela é convertida para maiúsculas.
    // - Se a string já for null, o uppercase() não será chamado, pois usamos ?..
}

/**
// Essa função é a mesma coisa só que usando if
fun cleanString(colors: String?): String? {
    // Se colors não for nulo, remove os espaços e converte para maiúsculas
    if (colors != null) {
        return colors.replace(" ", "").uppercase()
    }
    // Se colors for nulo, simplesmente retorna null.
    else {
        return null
    }
 }
*/

fun main() {
    showInstructions() // chama a função que mostra as informações
    val colors = readColorsByUser() // chama a função que captura a entrada do usuário e logo em seguida armazena em colors

    if (colors != null){
        //continuar...
        val colorsLIst = splitColors(cleanString(colors)!!)
        // cleanString(colors)!!
        // Remove espaços em branco e converte as cores para maiúsculas.
        // O !! força o Kotlin a tratar o resultado como não-nulo.
        /**
         * cleanString(" vermelho , azul ,verde ") // Saída: "VERMELHO,AZUL,VERDE"
         */
        // splitColors(...)
        // Divide a string processada com base nas vírgulas, criando uma lista de cores
        /**
         * splitColors("VERMELHO,AZUL,VERDE") // Saída: ["VERMELHO", "AZUL", "VERDE"]
         */
        // armazena tudo isso em colorsLIst
        println(colorsLIst)
    } else {
        //começar novamente
        // TODO: Implementar isso certo criatura!
        println("Comece novamente")
    }
        println(colors) // Imprime a entrada original do usuário (antes da limpeza e separação)
}

/**
 O que vimos na aula 02?

 1) O que é depuração e como depurar o código?
 - Depuração (debugging) é o processo de analisar e corrigir erros no código.

 No depurador, podemos:
 - Definir pontos de interrupção (breakpoints) → A famosa "bolinha vermelha", que faz o código parar ali durante a execução.
 - Executar passo a passo → Para ver o que acontece em cada linha.
 - Observar variáveis → Ver os valores das variáveis no momento da execução.

 2) O que é um Breakpoint (bolinha vermelha)?
 - Um breakpoint é um ponto no código onde a execução será pausada durante a depuração.
 - Permite inspecionar variáveis, testar condições e seguir passo a passo.
- O código pausa nos breakpoints, permitindo inspecionar variáveis e a execução passo a passo.

 3) O que significa o ? em "String?" ?
 - String → Não pode ser nulo (null).
 - String? → Pode ser nulo.

 Exemplo 01:
 var nome: String = "Carlos" // Sempre terá um valor e não pode ser nulo
 var sobrenome: String? = null // Pode ser nulo
 - Usamos ? para evitar erros com valores nulos.

4) O que é Smart Cast?
 - Smart Cast é um recurso do Kotlin que automaticamente reconhece o tipo de uma variável após uma verificação
 - O kotlin realiza o Smart Cast sozinho quando uma variável não pode mudar (var), não precisa fazer conversão manual (as String), ele já entende o tipo sozinho!

 Resumindo:
 - Smart Cast	O Kotlin detecta automaticamente o tipo após uma verificação)
 - Quando funciona?	Quando a variável não pode ser alterada (val)
 - Quando NÃO funciona?	Se a variável puder mudar (var)

 Exemplo 01 - Com Smart Cast
 fun imprimirComprimento(texto: Any) {
    if (texto is String) { // O if (texto is String) verifica se texto é realmente uma String.
        println(texto.length) // Aqui o Kotlin já trata 'texto' como String automaticamente
    }
 }
 - Dentro do if, Kotlin já entende que texto é uma String, então podemos acessar .length sem precisar converter (as String).
 - Isso é o Smart Cast, porque o Kotlin faz a conversão automática do tipo

 Exemplo 02 - Sem Smart Cast
 fun imprimirComprimento(texto: Any) {
    if (texto is String) {
        println((texto as String).length) // Precisamos fazer um "cast" manual
    }
 }

 Exemplo 03 - Quando o Smart Cast não funciona
 fun verificar(texto: Any) {
    if (texto is String) {
        texto = 42 // Erro! Kotlin não pode garantir que texto continua sendo String
        println(texto.length) // Não compila
    }
 }
 - Se a variável pode ser alterada (var), o Kotlin não pode garantir que o tipo não mudou.

 Corrigindo o erro:
 fun verificar(texto: Any) {
    if (texto is String) {
        val tamanho = texto.length // Agora funciona porque texto não pode mudar!
        println(tamanho)
    }
 }

 5) O que é !! (Not-null Assertion)?
 - O operador !! força o Kotlin a tratar uma variável nullable (String?, por exemplo) como se nunca fosse nula.
 - Se a variável for null, ele lança um erro NullPointerException (NPE).

 Exemplo onde !! não funciona:
 fun main() {
    val nome: String? = null
    println(nome!!.length) // ERRO: NullPointerException (NPE)
 }
- Como nome é null, o !! força a execução, e o programa quebra com um erro.

 Exemplo onde !! funciona:
 fun main() {
    val nome: String? = "Kotlin"
    println(nome!!.length) // Funciona porque nome NÃO é null
 }

 6) O que é ?. (Safe Call Operator)?
 - O operador ?. é chamado de Safe Call Operator porque ele verifica se a variável é null antes de acessar propriedades ou chamar métodos.
 - Se for null, ele não executa a operação e apenas retorna null em vez de dar erro.

 Exemplo 01:
 fun main() {
    val nome: String? = null
    println(nome?.length) // Retorna "null" em vez de dar erro
 }
 - Aqui, nome?.length só acessa length se nome não for null.
 - Se nome for null, ele simplesmente retorna null, sem erro.

 Exemplo 02:
 fun main() {
    val nome: String? = "Kotlin"
    println(nome?.uppercase()) // Saída: "KOTLIN"
 }
 - Como nome não é null, .uppercase() é chamado normalmente.

 7) Depuração (Debugging) no Kotlin: Step Over, Step Into, Step Out
 - Quando você está depurando (debugando) um código, pode controlar a execução passo a passo para entender melhor o que está acontecendo.
 - Android Studio oferecem três principais comandos para isso:

a) Step Over
 - Executa a linha atual e vai para a próxima, SEM entrar em funções chamadas.

 Exemplo:
 fun main() {
    val resultado = soma(2, 3)  // <- Aqui, se usarmos "Step Over", ele apenas chama "soma" e vai para a próxima linha
    println(resultado)
 }

 fun soma(a: Int, b: Int): Int {
    return a + b
 }
- Se você usar "Step Over" na linha val resultado = soma(2, 3), o código executa a função soma, mas NÃO entra nela. Ele apenas retorna o resultado e segue para println(resultado).

 b) Step Into
 - Executa a linha atual, mas SE houver uma função chamada, entra dentro dela para depurar linha por linha.
 - Se você usar "Step Into" na linha val resultado = soma(2, 3), o depurador entra dentro da função soma() e você pode ver como ela funciona internamente.

 c) Step Out
 - Se você já entrou em uma função (com "Step Into"), este comando executa o resto da função e volta para onde foi chamada.
 - Se você estiver dentro da função soma(), usar "Step Out" faz com que o depurador execute o resto dela e volte para main(), parando na próxima linha após a chamada da função.

 Resumindo:
 - Step Over: Executa a linha atual e vai para a próxima (NÃO entra em funções).
 - Step Into: Entra dentro da função chamada na linha atual.
 - Step Out: Shift + F8	Sai da função atual e volta para onde foi chamada.

 8)
 - readln(): Captura a entrada do usuário.
 - .split(","): Divide a string em partes usando vírgula como separador.
 - .replace(" ", ""): Remove espaços.
 - .uppercase(): Converte a string para maiúsculas.
 - Uso de TODO() para lembrar de implementar funcionalidades futuras.
 */
